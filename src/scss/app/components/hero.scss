$hero-bg: $gray-300;
$hero-padding: $gutter * 2;
$hero-content-zindex: 20;
$hero-loader-zindex: 100;
$hero-transition-offset: 50px;
$hero-heights: (
  abs: 600px,
  50: 50vh,
  75: 75vh,
  100: 100vh
);
$hero-transitions: ("slide-up", "slide-down", "scale-in", "scale-out");
$hero-transitions-start: (
  "slide-up": translateY($hero-transition-offset),
  "slide-down": translateY(-$hero-transition-offset),
  "scale-in": scale(0.9),
  "scale-out": scale(1.1)
);
$hero-transitions-end: (
  "slide-up": translateY(0),
  "slide-down": translateY(0),
  "scale-in": scale(1),
  "scale-out": scale(1)
);

.af-hero {
  position: relative;
  padding: $hero-padding;
  display: flex;

  .hero_content {
    display: flex;
    align-items: center;
    position: relative;
    z-index: $hero-content-zindex;
  }

  // Heights
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      @each $height in map-keys($hero-heights) {
        &.hero#{breakpoint-infix($breakpoint)}-#{$height} {
          height: map-get($hero-heights, $height);
          padding: $gutter;
        }
      }
    }
  }

  // Theme
  @each $theme in $themes {
    &.hero-#{$theme} {
      background: map-get($theme-alt-bg, $theme);
      color: map-get($theme-alt-color, $theme);

      .hero_content {
        color: map-get($theme-alt-color, $theme);
      }

      &[data-bg-image]::before {
        background: map-get($theme-bg, $theme);
      }
    }
  }

  // With background image
  &[class*="hero-bg"] {
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
  }

  &.hero-bg-fixed {
    background-attachment: fixed;
  }

  &[data-bg-image]:not([data-preload="false"]) {
    &::before {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: $hero-loader-zindex;
      opacity: 1;
      transition: all 0.3s ease;
    }
  }

  // State
  &[data-transition="true"] {
    .hero_content {
      opacity: 0;
      transform: translateY(50px);
    }
  }
  &[class*="has-transition"] {
    .hero_content {
      transition: all 0.5s ease;
    }
  }

  // Transitions types
  @each $transition in $hero-transitions {
    &.has-transition-#{$transition} {
      .hero_content {
        transform: map-get($hero-transitions-start, $transition);
      }

      &.is-transition-in {
        .hero_content {
          transform: map-get($hero-transitions-end, $transition);
        }
      }
    }
  }

  &.is-transition-in {
    .hero_content {
      opacity: 1;
    }
  }

  &.has-bg {
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;

    &.hero-bg-fixed {
      background-attachment: fixed;
    }
  }

  &.is-loaded {
    &[data-bg-image] {
      &::before {
        opacity: 0;
        z-index: 0;
      }
    }
  }
}
